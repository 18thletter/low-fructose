/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Differential
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by CoffeeScript 1.7.1
(function() {
  Template.entryResetPassword.helpers({
    error: function() {
      return Session.get('entryError');
    },
    logo: function() {
      return AccountsEntry.settings.logo;
    }
  });

  Template.entryResetPassword.events({
    'submit #resetPassword': function(event) {
      var password, passwordErrors;
      event.preventDefault();
      password = $('input[type="password"]').val();
      passwordErrors = (function(password) {
        var errMsg, msg;
        errMsg = [];
        msg = false;
        if (password.length < 7) {
          errMsg.push(t9n("error.minChar"));
        }
        if (password.search(/[a-z]/i) < 0) {
          errMsg.push(t9n("error.pwOneLetter"));
        }
        if (password.search(/[0-9]/) < 0) {
          errMsg.push(t9n("error.pwOneDigit"));
        }
        if (errMsg.length > 0) {
          msg = "";
          errMsg.forEach(function(e) {
            return msg = msg.concat("" + e + "\r\n");
          });
          Session.set('entryError', msg);
          return true;
        }
        return false;
      })(password);
      if (passwordErrors) {
        return;
      }
      return Accounts.resetPassword(Session.get('resetToken'), password, function(error) {
        if (error) {
          return Session.set('entryError', error.reason || "Unknown error");
        } else {
          Session.set('resetToken', null);
          return Router.go(AccountsEntry.settings.dashboardRoute);
        }
      });
    }
  });

}).call(this);
