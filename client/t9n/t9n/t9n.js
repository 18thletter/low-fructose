/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 El Softwarerero
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by CoffeeScript 1.7.1
(function() {
  var Handlebars, T9n;

  if (Meteor.isClient) {
    if (Package.ui) {
      Handlebars = Package.ui.Handlebars;
    }
    Handlebars.registerHelper('t9n', function(x) {
      return T9n.get(x);
    });
  }

  T9n = (function() {
    function T9n() {}

    T9n.maps = {};

    T9n.defaultLanguage = 'en';

    T9n.language = '';

    T9n.dep = new Deps.Dependency();

    T9n.missingPrefix = ">";

    T9n.missingPostfix = "<";

    T9n.map = function(language, map) {
      if (!this.maps[language]) {
        this.maps[language] = {};
      }
      this.registerMap(language, '', false, map);
      return this.dep.changed();
    };

    T9n.get = function(label) {
      var _ref, _ref1;
      this.dep.depend();
      if (typeof label !== 'string') {
        return '';
      }
      return ((_ref = this.maps[this.language]) != null ? _ref[label] : void 0) || ((_ref1 = this.maps[this.defaultLanguage]) != null ? _ref1[label] : void 0) || this.missingPrefix + label + this.missingPostfix;
    };

    T9n.registerMap = function(language, prefix, dot, map) {
      var key, value, _results;
      if (typeof map === 'string') {
        return this.maps[language][prefix] = map;
      } else if (typeof map === 'object') {
        if (dot) {
          prefix = prefix + '.';
        }
        _results = [];
        for (key in map) {
          value = map[key];
          _results.push(this.registerMap(language, prefix + key, true, value));
        }
        return _results;
      }
    };

    return T9n;

  })();

  this.T9n = T9n;

  this.t9n = function(x) {
    return T9n.get(x);
  };

}).call(this);
