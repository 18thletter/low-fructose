/*
* The MIT License (MIT)
*
* Copyright (c) 2013 Differential
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of
* this software and associated documentation files (the "Software"), to deal in
* the Software without restriction, including without limitation the rights to
* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
* the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// Generated by CoffeeScript 1.7.1
(function() {
  Router.map(function() {
    this.route("entrySignIn", {
      path: "/sign-in",
      onBeforeAction: function() {
        Session.set('entryError', void 0);
        Session.set('buttonText', 'in');
        return Session.set('fromWhere', Router.current().path);
      },
      onRun: function() {
        var pkgRendered, userRendered;
        if (Meteor.userId()) {
          Router.go(AccountsEntry.settings.dashboardRoute);
        }
        if (AccountsEntry.settings.signInTemplate) {
          this.template = AccountsEntry.settings.signInTemplate;
          pkgRendered = Template.entrySignIn.rendered;
          userRendered = Template[this.template].rendered;
          if (userRendered) {
            Template[this.template].rendered = function() {
              pkgRendered.call(this);
              return userRendered.call(this);
            };
          } else {
            Template[this.template].rendered = pkgRendered;
          }
          Template[this.template].events(AccountsEntry.entrySignInEvents);
          return Template[this.template].helpers(AccountsEntry.entrySignInHelpers);
        }
      }
    });
    this.route("entrySignUp", {
      path: "/sign-up",
      onBeforeAction: function() {
        Session.set('entryError', void 0);
        return Session.set('buttonText', 'up');
      },
      onRun: function() {
        var pkgRendered, userRendered;
        if (AccountsEntry.settings.signUpTemplate) {
          this.template = AccountsEntry.settings.signUpTemplate;
          pkgRendered = Template.entrySignUp.rendered;
          userRendered = Template[this.template].rendered;
          if (userRendered) {
            Template[this.template].rendered = function() {
              pkgRendered.call(this);
              return userRendered.call(this);
            };
          } else {
            Template[this.template].rendered = pkgRendered;
          }
          Template[this.template].events(AccountsEntry.entrySignUpEvents);
          return Template[this.template].helpers(AccountsEntry.entrySignUpHelpers);
        }
      }
    });
    this.route("entryForgotPassword", {
      path: "/forgot-password",
      onBeforeAction: function() {
        return Session.set('entryError', void 0);
      }
    });
    this.route('entrySignOut', {
      path: '/sign-out',
      onBeforeAction: function(pause) {
        Session.set('entryError', void 0);
        if (AccountsEntry.settings.homeRoute) {
          Meteor.logout(function() {
            return Router.go(AccountsEntry.settings.homeRoute);
          });
        }
        return pause();
      }
    });
    return this.route('entryResetPassword', {
      path: 'reset-password/:resetToken',
      onBeforeAction: function() {
        Session.set('entryError', void 0);
        return Session.set('resetToken', this.params.resetToken);
      }
    });
  });

}).call(this);
